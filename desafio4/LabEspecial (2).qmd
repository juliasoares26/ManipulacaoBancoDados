---
title: "Laborat√≥rio especial"
format: html
editor: visual
---

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
# Carrega as bibliotecas PRIMEIRO
library(tidyverse)
library(leaflet)
library(lubridate)
library(ggmap)
library(geosphere)
```

```{r}
# Carrega os dados de voos. L√™ diretamente do zip, como est√° enunciado no desafio
flights <- read_csv(unz("flights.csv.zip", "flights.csv"))

# Carrega os dados dos aeroportos.
airports = read_csv('airports.csv')
```

```{r}
# Fun√ß√£o para analisar o trajeto de uma aeronave espec√≠fica.

analisar_trajeto_completo <- function(tail_number, airports_df) {
  
  # a. Filtra os voos da aeronave e ordena por data e hora.
  dados_aeronave <- flights %>%
    filter(TAIL_NUMBER == tail_number) %>%
    arrange(YEAR, MONTH, DAY, DEPARTURE_TIME) %>%
    mutate(
      # Cria uma vari√°vel num√©rica para a hora de partida.
      DEPARTURE_TIME_NUM = as.numeric(DEPARTURE_TIME),
      # Converte as colunas de data em um formato de data.
      DATA = make_date(YEAR, MONTH, DAY),
      # Combina data e hora para uma vari√°vel de tempo completa.
      DATA_HORA = make_datetime(YEAR, MONTH, DAY, 
                               hour = ifelse(is.na(DEPARTURE_TIME_NUM), 0, DEPARTURE_TIME_NUM %/% 100),
                               min = ifelse(is.na(DEPARTURE_TIME_NUM), 0, DEPARTURE_TIME_NUM %% 100)),
      # Calcula a velocidade m√©dia do voo, tratando NAs.
      VELOCIDADE_MEDIA = ifelse(AIR_TIME > 0 & !is.na(AIR_TIME), 
                               DISTANCE / (AIR_TIME/60), NA),
      # Normaliza a velocidade m√©dia para a espessura da linha do mapa.
      ESPESSURA_LINHA = scales::rescale(VELOCIDADE_MEDIA, to = c(1, 10), na.rm = TRUE)
    )
  
  # Checa se a aeronave existe nos dados. Se n√£o, para a execu√ß√£o.
  if (nrow(dados_aeronave) == 0) {
    stop(paste("Aeronave", tail_number, "n√£o encontrada nos dados."))
  }
  
  # b. Cria a tabela final para o output.
  tabela_tidy <- dados_aeronave %>%
    select(TAIL_NUMBER, DATA, DATA_HORA, 
           ORIGIN_AIRPORT, DESTINATION_AIRPORT,
           AIRLINE, FLIGHT_NUMBER,
           DEPARTURE_TIME, ARRIVAL_TIME,
           AIR_TIME, DISTANCE, VELOCIDADE_MEDIA) %>%
    arrange(DATA_HORA)
  
  # Junta os dados de voos com as coordenadas dos aeroportos.
  dados_com_coords <- dados_aeronave %>%
    left_join(airports_df %>% 
                select(IATA_CODE, LATITUDE, LONGITUDE) %>%
                rename(ORIGIN_AIRPORT = IATA_CODE,
                       ORIGIN_LAT = LATITUDE,
                       ORIGIN_LON = LONGITUDE),
              by = "ORIGIN_AIRPORT") %>%
    left_join(airports_df %>% 
                select(IATA_CODE, LATITUDE, LONGITUDE) %>%
                rename(DESTINATION_AIRPORT = IATA_CODE,
                       DEST_LAT = LATITUDE,
                       DEST_LON = LONGITUDE),
              by = "DESTINATION_AIRPORT")
  
  # c. e d. Cria o mapa com Leaflet.
  mapa <- leaflet() %>%
    addTiles() %>%
    addProviderTiles(providers$CartoDB.Positron)
  
  # Adiciona cada trajeto como uma linha.
  for (i in 1:nrow(dados_com_coords)) {
    if (!is.na(dados_com_coords$ORIGIN_LAT[i]) && !is.na(dados_com_coords$DEST_LAT[i])) {
      
      # Monta o popup da linha com infos do voo.
      popup_info <- paste(
        "<b>Voo:</b>", dados_com_coords$FLIGHT_NUMBER[i],
        "<br><b>Data:</b>", dados_com_coords$DATA[i],
        "<br><b>Rota:</b>", dados_com_coords$ORIGIN_AIRPORT[i], "‚Üí", dados_com_coords$DESTINATION_AIRPORT[i],
        "<br><b>Velocidade:</b>", round(dados_com_coords$VELOCIDADE_MEDIA[i], 1), "mph",
        "<br><b>Dist√¢ncia:</b>", dados_com_coords$DISTANCE[i], "milhas",
        "<br><b>Tempo de voo:</b>", dados_com_coords$AIR_TIME[i], "min"
      )
      
      mapa <- mapa %>%
        addPolylines(
          lng = c(dados_com_coords$ORIGIN_LON[i], dados_com_coords$DEST_LON[i]),
          lat = c(dados_com_coords$ORIGIN_LAT[i], dados_com_coords$DEST_LAT[i]),
          weight = dados_com_coords$ESPESSURA_LINHA[i],
          color = "#2c7bb6",
          opacity = 0.8,
          popup = popup_info
        )
    }
  }
  
  # Adiciona marcadores para todos os aeroportos visitados.
  aeroportos_visitados <- unique(c(dados_com_coords$ORIGIN_AIRPORT, dados_com_coords$DESTINATION_AIRPORT))
  coords_aeroportos <- airports_df %>%
    filter(IATA_CODE %in% aeroportos_visitados)
  
  mapa <- mapa %>%
    addCircleMarkers(
      data = coords_aeroportos,
      lng = ~LONGITUDE,
      lat = ~LATITUDE,
      radius = 5,
      color = "#d73027",
      fillColor = "#fc8d59",
      fillOpacity = 0.8,
      popup = ~paste("<b>Aeroporto:</b>", IATA_CODE, "<br><b>Nome:</b>", AIRPORT)
    )
  
  # Adiciona painel de estat√≠sticas no mapa.
  estatisticas <- paste(
    "<h4>üìä Estat√≠sticas da Aeronave", tail_number, "</h4>",
    "<b>Total de voos:</b>", nrow(dados_aeronave), "<br>",
    "<b>Velocidade m√©dia:</b>", round(mean(dados_com_coords$VELOCIDADE_MEDIA, na.rm = TRUE), 1), "mph<br>",
    "<b>Dist√¢ncia total:</b>", sum(dados_com_coords$DISTANCE, na.rm = TRUE), "milhas<br>",
    "<b>Aeroportos visitados:</b>", length(aeroportos_visitados), "<br>",
    "<b>Per√≠odo:</b>", min(dados_com_coords$DATA), "a", max(dados_com_coords$DATA)
  )
  
  mapa <- mapa %>%
    addControl(
      html = estatisticas,
      position = "topright"
    ) %>%
    # Adiciona a legenda.
    addLegend(
      position = "bottomright",
      colors = c("#2c7bb6"),
      labels = paste("Espessura = Velocidade (", 
                    round(min(dados_com_coords$VELOCIDADE_MEDIA, na.rm = TRUE), 1), 
                    "-", 
                    round(max(dados_com_coords$VELOCIDADE_MEDIA, na.rm = TRUE), 1), 
                    "mph)"),
      title = "Legenda"
    )
  
  # Retorna a tabela e o mapa em uma lista.
  return(list(
    tabela_tidy = tabela_tidy,
    mapa = mapa,
    estatisticas = list(
      total_voos = nrow(dados_aeronave),
      velocidade_media = mean(dados_com_coords$VELOCIDADE_MEDIA, na.rm = TRUE),
      distancia_total = sum(dados_com_coords$DISTANCE, na.rm = TRUE),
      aeroportos_visitados = aeroportos_visitados,
      periodo = range(dados_com_coords$DATA)
    ),
    dados_completos = dados_com_coords
  ))
}

# Roda a fun√ß√£o com a aeronave "N407AS" e o dataset 'airports'.
resultado <- analisar_trajeto_completo("N407AS", airports)

# Note que o resultado √© dado apenas como um exemplo, para especificar alguma linha a√©rea espec√≠fica √© s√≥ colocar como argumento da fun√ß√£o
```

```{r}
# Para visualizar os resultados:
print(resultado$tabela_tidy)
```

```{r}
# Para mostrar o mapa:
resultado$mapa
```

```{r}
# Para ver as estat√≠sticas:
print(resultado$estatisticas)
```